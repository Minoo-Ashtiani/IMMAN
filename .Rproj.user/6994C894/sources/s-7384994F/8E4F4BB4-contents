

setwd("F:/Science/Pasteur/Workshops and Seminars/Normalization/Data")
rawDataMatrix = read.table("rawDataMatrix.txt" , sep = "\t" , header = T, stringsAsFactors = F)
rawDataMatrix = as.matrix(rawDataMatrix)
referenceMatrix = read.table("referenceMatrix.txt" , sep = "\t" , header = T, stringsAsFactors = F)
referenceMatrix = as.matrix(referenceMatrix)



dim(rawDataMatrix)

max(rawDataMatrix) - min(rawDataMatrix)
boxplot(rawDataMatrix , pch=".")

hist(rawDataMatrix[,2] , breaks = 100)


par(mfrow = c(2,3))

for(i in 2:7){
  A = (rawDataMatrix[,1]+rawDataMatrix[,i])/2 
  M = (rawDataMatrix[,1]-rawDataMatrix[,i])    
  smoothScatter(A,M , ylim = c(-25000,5000))
  abline(0,0 , col ="green")
}
dev.off()


par(mfrow = c(2,3))
for(i in 2:7){
qqplot(rawDataMatrix[,1],rawDataMatrix[,i] , col = "darkgreen" , ylim=c(0,70000))
}
dev.off()


library(geneplotter)
multidensity(rawDataMatrix , legend=list("topright", levels(n),
     lty=1, lwd=2,text.font = 1, cex = 0.5,col = 1:12) , main="densities")















# Log2 transformation     
expressionMatrix = log2(rawDataMatrix)
max(expressionMatrix) - min(expressionMatrix)

boxplot(expressionMatrix , pch=".")
hist(expressionMatrix[,1] , breaks = 100)



par(mfrow = c(2,3))

for(i in 2:7){
  A = (expressionMatrix[,1]+expressionMatrix[,i])/2 
  M = (expressionMatrix[,1]-expressionMatrix[,i])    
  smoothScatter(A,M , ylim = c(-6,3))
  abline(0,0 , col ="green")
}

par(mfrow = c(2,3))
for(i in 2:7){
  qqplot(expressionMatrix[,1],expressionMatrix[,i] , col = "darkblue" , ylim=c(5,18))
}

dev.off()


multidensity(expressionMatrix , legend=list("topright", levels(n),
   lty=1, lwd=2,text.font = 1, cex = 0.5,col = 1:12) , main="densities")














# MIN and MAX Normalization

min.max.normalization = function(x , newmax , newmin) {
  nmat = matrix(0 , length(x[,1]) , length(x[1,]))
  v.min = apply(x,2,min)
  v.max = apply(x,2,max)
  for(j in 1:length(x[1,])){
    for(i in 1:length(x[,1])){
      nmat[i,j] = ((x[i,j]- v.min[j])/(v.max[j] - v.min[j])) * (newmax - newmin) + newmin 
    }
  }
  nmat
}
MAT = min.max.normalization(expressionMatrix , newmax = 20 , newmin = 10)
boxplot(MAT , pch=".")

hist(MAT[,1] , breaks = 100)


par(mfrow = c(2,3))

for(i in 2:7){
  A = (MAT[,1]+MAT[,i])/2 
  M = (MAT[,1]-MAT[,i])    
  smoothScatter(A,M , ylim = c(-8,4))
  abline(0,0 , col ="green")
}

par(mfrow = c(2,3))
for(i in 2:7){
  qqplot(MAT[,1],MAT[,i] , col = "darkred")
}

dev.off()


multidensity(MAT , legend=list("topright", levels(n),
 lty=1, lwd=2,text.font = 1, cex = 0.5,col = 1:12) , main="densities")












#Constant shift normalization

constant.shift.normalization = function(x,constant){
  if(is.numeric(constant) & length(constant)==1){
  
  nmat = matrix(0 , length(x[,1]) , length(x[1,]))
  for(j in 1:length(x[1,])){
    for(i in 1:length(x[,1])){
      nmat[i,j] = x[i,j]- constant 
    }
  }
  nmat

}else if(is.numeric(constant) & length(constant)==length(x[1,])){
  nmat = matrix(0 , length(x[,1]) , length(x[1,]))
  for(j in 1:length(x[1,])){
    for(i in 1:length(x[,1])){
      nmat[i,j] = x[i,j]- constant[j] 
    }
  }
  nmat
}else if(constant == "median"){
  v.median = apply(x,2,median)
  nmat = matrix(0 , length(x[,1]) , length(x[1,]))
  for(j in 1:length(x[1,])){
    for(i in 1:length(x[,1])){
      nmat[i,j] = x[i,j]- v.median[j] 
    }
  }
  nmat
} else if(constant == "mean"){
  v.mean = apply(x,2,mean)
  nmat = matrix(0 , length(x[,1]) , length(x[1,]))
  for(j in 1:length(x[1,])){
    for(i in 1:length(x[,1])){
      nmat[i,j] = x[i,j]- v.mean[j] 
    }
  }
  nmat
}
}

MAT = constant.shift.median(expressionMatrix , constant = "median")

boxplot(MAT , pch=".")

hist(MAT[,1] , breaks = 100)


par(mfrow = c(2,3))

for(i in 2:7){
  A = (MAT[,1]+MAT[,i])/2 
  M = (MAT[,1]-MAT[,i])    
  smoothScatter(A,M , ylim = c(-6,4))
  abline(0,0 , col ="green")
}

par(mfrow = c(2,3))
for(i in 2:7){
  qqplot(MAT[,1],MAT[,i] , col = "darkblue" , ylim=c(-2,10))
}

dev.off()


multidensity(MAT , legend=list("topright", levels(n),
  lty=1, lwd=2,text.font = 1, cex = 0.5,col = 1:12) , main="densities")







# Mean Constant Shift   

constant.shift.mean = function(x){
  v.mean = apply(x,2,mean)
  nmat = matrix(0 , length(x[,1]) , length(x[1,]))
  for(i in 1:length(x[1,])){
    for(j in 1:length(x[,1])){
      nmat[j,i] = x[j,i]- v.mean[i] 
    }
  }
  nmat
}

MAT = constant.shift.mean(expressionMatrix)

boxplot(a , pch=".")

boxplot(MAT , pch=".")

hist(MAT[,1] , breaks = 100)


par(mfrow = c(2,3))

for(i in 2:7){
  A = (MAT[,1]+MAT[,i])/2 
  M = (MAT[,1]-MAT[,i])    
  smoothScatter(A,M,ylim = c(-6,4))
  abline(0,0 , col ="green")
}

par(mfrow = c(2,3))
for(i in 2:7){
  qqplot(MAT[,1],MAT[,i] , col = "darkblue")
}

dev.off()


multidensity(MAT , legend=list("topright", levels(n),
 lty=1, lwd=2,text.font = 1, cex = 0.5,col = 1:12) , main="densities")

















# Scale normalization

referenceMatrix = read.table("referenceMatrix.txt" , sep = "\t" , header = T,stringsAsFactors = F)


# number of columns of refMAt must be the same as mainMAt
scale.normalization = function(mainMAT,refMAT){
  
  meanmain = apply(mainMAT,2,mean)
  meanref = apply(refMAT,2,mean)
  nmat = matrix(0 , length(mainMAT[,1]) , length(mainMAT[1,]))
  for(j in 1:length(mainMAT[1,])){
    for(i in 1:length(mainMAT[,1])){
      nmat[i,j] = mainMAT[i,j] * (meanref[j]/meanmain[j]) 
    }
  }
  nmat
}


MAT = scale.normalization(mainMAT = expressionMatrix , refMAT = referenceMatrix)

boxplot(MAT , pch=".")

hist(MAT[,1] , breaks = 100)


par(mfrow = c(2,3))

for(i in 2:7){
  A = (MAT[,1]+MAT[,i])/2 
  M = (MAT[,1]-MAT[,i])    
  smoothScatter(A,M , ylim = c(-6,2))
  abline(0,0 , col ="green")
}

par(mfrow = c(2,3))
for(i in 2:7){
  qqplot(MAT[,1],MAT[,i] , ylim=c(4,14))
}

dev.off()


multidensity(MAT , legend=list("topright", levels(n),
 lty=1, lwd=2,text.font = 1, cex = 0.5,col = 1:12) , main="densities")
















# Decimal scaling

decimal.scaling.normalization = function(x){
  
  MAX = apply(x,2,max)
  MIN = apply(x,2,min)
  abs1 = abs(MAX)
  abs2 = abs(MIN)
  
  nmat = matrix(0 , length(x[,1]) , length(x[1,]))
  
for(i in 1:length(x[1,])){
  
    if(abs1[i]>abs2[i]){
      
      z = 1
      while(10^z < abs1[i]){
        z = z+1
      }
      
      for(j in 1:length(x[,1])){
        nmat[j,i] = x[j,i]/(10^z)
    }
    
    } else {
    
      z = 1
      while(10^z < abs2[i]){
        z = z+1
      }
      
      for(j in 1:length(x[,1])){
        nmat[j,i] = x[j,i]/(10^z)
      }
      
  }
}
nmat
}


MAT = decimal.scaling.normalization(expressionMatrix)

boxplot(MAT , pch=".")

hist(MAT[,1] , breaks = 100)


par(mfrow = c(2,3))

for(i in 2:7){
  A = (MAT[,1]+MAT[,i])/2 
  M = (MAT[,1]-MAT[,i])    
  smoothScatter(A,M)
  abline(0,0 , col ="green")
}

par(mfrow = c(2,3))
for(i in 2:7){
  qqplot(MAT[,1],MAT[,i] , col = "darkgreen")
}

dev.off()


multidensity(MAT , legend=list("topright", levels(n),
 lty=1, lwd=2,text.font = 1, cex = 0.5,col = 1:12) , main="densities")














# Zscore Normalization

# The expression matrix is zscore normalized using "scale" function.
zscored = scale(expressionMatrix)

boxplot(zscored , pch=".")

hist(zscored[,1] , breaks = 100)


par(mfrow = c(2,3))

for(i in 2:7){
  A = (zscored[,1]+zscored[,i])/2 
  M = (zscored[,1]-zscored[,i])    
  smoothScatter(A,M,ylim = c(-6,4))
  abline(0,0 , col ="green")
}

par(mfrow = c(2,3))
for(i in 2:7){
  qqplot(zscored[,1],zscored[,i] , col = "darkred" , ylim=c(-2,9))
}

dev.off()


multidensity(zscored , legend=list("topright", levels(n),
 lty=1, lwd=2,text.font = 1, cex = 0.5,col = 1:12) , main="densities")











# Interquantile range normalization

#median(apply(expressionMatrix,2,median))
#median(expressionMatrix)

#quantile(apply(expressionMatrix , 2 , function(x) quantile(x , 0.75)) - apply(expressionMatrix , 2 , function(x) quantile(x , 0.25)) , 0.75) - quantile(apply(expressionMatrix , 2 , function(x) quantile(x , 0.75)) - apply(expressionMatrix , 2 , function(x) quantile(x , 0.25)) , 0.25)
#quantile(expressionMatrix , 0.75) - quantile(expressionMatrix , 0.25)


Interquantile.range.normalization = function(x){
  medians = apply(x,2,median)
  globalmedian = median(x)
  globalIQR = quantile(x , 0.75) - quantile(x , 0.25)
  IQRs = apply(x , 2 , function(y) quantile(y , 0.75)) - apply(x , 2 , function(y) quantile(y , 0.25))

  nmat = matrix(0 , length(x[,1]) , length(x[1,]))
  for(j in 1:length(x[1,])){
    
    for(i in 1:length(x[,1])){
      nmat[i,j] = (x[i,j] + globalmedian - medians[j]) * (globalIQR/IQRs[j]) 
    }
  }
  nmat
}


MAT = Interquantile.range.normalization(expressionMatrix)

boxplot(MAT , pch=".")

hist(MAT[,1] , breaks = 100)


par(mfrow = c(2,3))

for(i in 2:7){
  A = (MAT[,1]+MAT[,i])/2 
  M = (MAT[,1]-MAT[,i])    
  smoothScatter(A,M,ylim=c(-5,9))
  abline(0,0 , col ="green")
}

par(mfrow = c(2,3))
for(i in 2:7){
  qqplot(MAT[,1],MAT[,i] , col = "darkblue" , ylim=c(4,19))
}

dev.off()


multidensity(MAT , legend=list("topright", levels(n),
  lty=1, lwd=2,text.font = 1, cex = 0.5,col = 1:12) , main="densities")



















# Quantile Normalization
library(preprocessCore)
quantiled = normalize.quantiles(expressionMatrix)

boxplot(quantiled , pch=".")

hist(quantiled[,1] , breaks = 100)


par(mfrow = c(2,3))

for(i in 2:7){
  A = (quantiled[,1]+quantiled[,i])/2 
  M = (quantiled[,1]-quantiled[,i])    
  smoothScatter(A,M,ylim = c(-6.5,4.5))
  abline(0,0 , col ="green")
}

par(mfrow = c(2,3))
for(i in 2:7){
  qqplot(quantiled[,1],quantiled[,i])
}

dev.off()


multidensity(quantiled , legend=list("topright", levels(n),
 lty=1, lwd=2,text.font = 1, cex = 0.5,col = 1:12) , main="densities")












# Median polish normalization
medpolished = medpolish(expressionMatrix , eps = 0, maxiter = 10, trace.iter = FALSE)
medianMAT = medpolished$residuals
median(medianMAT[1,])
median(medianMAT[,2])
median(medianMAT[3,])

medianpolished = expressionMatrix - medianMAT
mean(medianpolished[,1])
median(medianpolished[,1])
mean(medianpolished[,15])
median(medianpolished[,15])



boxplot(medianpolished , pch=".")

hist(medianpolished[,1] , breaks = 100)


par(mfrow = c(2,3))


par(mfrow = c(2,3))

for(i in 2:7){
  A = (medianpolished[,1]+medianpolished[,i])/2 
  M = (medianpolished[,1]-medianpolished[,i])    
  plot(A,M,ylim = c(-6.5,4.5))
  abline(0,0 , col ="green")
}



par(mfrow = c(2,3))
for(i in 2:7){
  qqplot(medianpolished[,1],medianpolished[,i])
}

dev.off()


multidensity(medianpolished , legend=list("topright", levels(n),
  lty=1, lwd=2,text.font = 1, cex = 0.5,col = 1:12) , main="densities")









library(nortest)
# Like shapiro test, Kolmogorov-Smirnov test is used for normality evaluation

lillietest=c()
for(i in 1:10){
  lillietest[i] = (lillie.test(expressionMatrix[i,]))$p.value
}
lillietest







lillietest.quantiled=c()
for(i in 1:10){
  lillietest.quantiled[i] = (lillie.test(quantiled[i,]))$p.value
}
lillietest.quantiled

sum(lillietest.quantiled < lillietest)






lillietest.medianpolished=c()
for(i in 1:10){
  lillietest.medianpolished[i] = (lillie.test(medianpolished[i,]))$p.value
}
lillietest.medianpolished

sum(lillietest.medianpolished < lillietest)












########################
#### density plots #####
########################


library(geneplotter)
n=sampleNames(data)   
n=factor(n)


multidensity(expressionMatrix , legend=list("topright", levels(n),
  lty=1, lwd=2,text.font = 1, cex = 0.5,col = 1:12) , main="densities")


multidensity(zscored , legend=list("topright", levels(n),
                                   lty=1, lwd=2,text.font = 1, cex = 0.5,col = 1:12) , main="densities")


multidensity(quantiled , legend=list("topright", levels(n),
                                     lty=1, lwd=2,text.font = 1, cex = 0.5,col = 1:12) , main="densities")
#plot(density(quantiled[,50]))
#plot(density(quantiled[,10]))


multidensity(medianpolished , legend=list("topright", levels(n),
                                          lty=1, lwd=2,text.font = 1, cex = 0.5,col = 1:12) , main="densities")


medianpolished.zscored = scale(medianpolished)

multidensity(medianpolished.zscored , legend=list("topright", levels(n),
                                                  lty=1, lwd=2,text.font = 1, cex = 0.5,col = 1:12) , main="densities")








#######################
##### MA plots ########
#######################


par(mfrow = c(2,3))

for(i in 2:7){
  A = (expressionMatrix[,1]+expressionMatrix[,i])/2 
  M = (expressionMatrix[,1]-expressionMatrix[,i])    
  smoothScatter(A,M)
  abline(0,0 , col ="green")
}



for(i in 2:7){
  A = (zscored[,1]+zscored[,i])/2 
  M = (zscored[,1]-zscored[,i])    
  smoothScatter(A,M)
  abline(0,0 , col ="green")
}



for(i in 2:7){
  A = (quantiled[,1]+quantiled[,i])/2 
  M = (quantiled[,1]-quantiled[,i])    
  smoothScatter(A,M)
  abline(0,0 , col ="green")
}



for(i in 2:7){
  A = (medianpolished[,1]+medianpolished[,i])/2 
  M = (medianpolished[,1]-medianpolished[,i])    
  plot(A , M , pch = ".")
  abline(0,0 , col ="green")
}


medianpolished.zscored = scale(medianpolished)


for(i in 2:7){
  A = (medianpolished.zscored[,1]+medianpolished.zscored[,i])/2 
  M = (medianpolished.zscored[,1]-medianpolished.zscored[,i])    
  plot(A , M , pch = ".")
  abline(0,0 , col ="green")
}

dev.off()








##########################
#### QQ Plots ############
##########################


# QQ plots on column one (sample one)
par(mfrow = c(2,2))

a = expressionMatrix[,1]
ps = seq(0.01 , 0.99 , by = 0.01)
qs = quantile(a , ps)
normalqs = qnorm(ps , mean = mean(expressionMatrix[,1]) ,sd = sd(expressionMatrix[,1]))
plot(normalqs , qs , xlab = "QQplot" , ylab = "Data", col = "orange")
title("None normalized data")


a = zscored[,1]
ps = seq(0.01 , 0.99 , by = 0.01)
qs = quantile(a , ps)
normalqs = qnorm(ps , mean = mean(zscored[,1]) ,sd = sd(zscored[,1]))
plot(normalqs , qs , xlab = "QQplot" , ylab = "Data", col = "orange")
title("Zscore normalization")


a = quantiled[,1]
ps = seq(0.01 , 0.99 , by = 0.01)
qs = quantile(a , ps)
normalqs = qnorm(ps , mean = mean(quantiled[,1]) ,sd = sd(quantiled[,1]))
plot(normalqs , qs , xlab = "QQplot" , ylab = "Data", col = "orange")
title("Quantile normalization")


a = medianpolished[,1]
ps = seq(0.01 , 0.99 , by = 0.01)
qs = quantile(a , ps)
normalqs = qnorm(ps , mean = mean(medianpolished[,1]) ,sd = sd(medianpolished[,1]))
plot(normalqs , qs , xlab = "QQplot" , ylab = "Data", col = "orange")
title("Median Polishe normalization")

dev.off()



# QQ plots on row one (gene one)
par(mfrow = c(2,2))

a = expressionMatrix[1,]
ps = seq(0.01 , 0.99 , by = 0.02)
qs = quantile(a , ps)
normalqs = qnorm(ps , mean = mean(expressionMatrix[1,]) ,sd = sd(expressionMatrix[1,]))
plot(normalqs , qs , xlab = "QQplot" , ylab = "Data", col = "orange")
title("None normalized data")


a = zscored[1,]
ps = seq(0.01 , 0.99 , by = 0.02)
qs = quantile(a , ps)
normalqs = qnorm(ps , mean = mean(zscored[1,]) ,sd = sd(zscored[1,]))
plot(normalqs , qs , xlab = "QQplot" , ylab = "Data", col = "orange")
title("Zscore normalization")


a = quantiled[1,]
ps = seq(0.01 , 0.99 , by = 0.02)
qs = quantile(a , ps)
normalqs = qnorm(ps , mean = mean(quantiled[1,]) ,sd = sd(quantiled[1,]))
plot(normalqs , qs , xlab = "QQplot" , ylab = "Data", col = "orange")
title("Quantile normalization")


a = medianpolished[1,]
ps = seq(0.01 , 0.99 , by = 0.02)
qs = quantile(a , ps)
normalqs = qnorm(ps , mean = mean(medianpolished[1,]) ,sd = sd(medianpolished[1,]))
plot(normalqs , qs , xlab = "QQplot" , ylab = "Data", col = "orange")
title("Median Polishe normalization")


dev.off()













##################################
####### PART 2 ###################
##################################
##################################
####### PART 2 ###################
##################################



ex = pm(data)
dim(ex)
ex = ex[1:10000,1:53]
min(ex)
max(ex)


# None normalized dataset 
boxplot(ex , pch="." , las = 3 )

par(mfrow=c(2,3))
for(i in 1:6){
  hist(ex[,i] , breaks = 100)
}

par(mfrow=c(2,3))
for(i in 1:6){
  hist(ex[i,] , breaks = 20)
}

dev.off()







# zscore Normalization
zscored1 = scale(ex)
boxplot(zscored1 , pch="." , las = 3)

par(mfrow=c(2,3))
for(i in 1:6){
  hist(zscored1[,i] , breaks = 100)
}

par(mfrow=c(2,3))
for(i in 1:6){
  hist(zscored1[i,] , breaks = 20)
}

dev.off()








# Quantile Normalization
library(preprocessCore)
quantiled1 = normalize.quantiles(ex)
boxplot(quantiled1 , pch=".")

par(mfrow=c(2,3))
for(i in 1:6){
  hist(quantiled1[,i] , breaks = 100)
}

par(mfrow=c(2,3))
for(i in 1:6){
  hist(quantiled1[i,] , breaks = 20)
}

dev.off()







# median polish normalization
medpolished1 = medpolish(ex , eps = 0, maxiter = 10, trace.iter = TRUE)
medianMAT1 = medpolished1$residuals
median(medianMAT1[1,])
median(medianMAT1[,2])
median(medianMAT1[3,])

medianpolished1 = ex - medianMAT1
mean(medianpolished1[,1])
median(medianpolished1[,1])
mean(medianpolished1[,15])
median(medianpolished1[,15])

boxplot(medianpolished1 , pch="." , las=3)


par(mfrow=c(2,3))
for(i in 1:6){
  hist(medianpolished1[,i] , breaks = 50)
}

par(mfrow=c(2,3))
for(i in 1:6){
  hist(medianpolished1[i,] , breaks = 20)
}

dev.off()




########################
#### density plots #####
########################

library(geneplotter)
n=sampleNames(data)   
n=factor(n)


multidensity(ex , legend=list("topright", levels(n),
                              lty=1, lwd=2,text.font = 1, cex = 0.5,col = 1:12) , main="densities")

multidensity(log2(ex) , legend=list("topright", levels(n),
                                    lty=1, lwd=2,text.font = 1, cex = 0.5,col = 1:12) , main="densities")

multidensity(scale(log2(ex)) , legend=list("topright", levels(n),
                                           lty=1, lwd=2,text.font = 1, cex = 0.5,col = 1:12) , main="densities")

multidensity(zscored1 , legend=list("topright", levels(n),
                                    lty=1, lwd=2,text.font = 1, cex = 0.5,col = 1:12) , main="densities")


multidensity(quantiled1 , legend=list("topright", levels(n),
                                      lty=1, lwd=2,text.font = 1, cex = 0.5,col = 1:12) , main="densities")
plot(density(quantiled1[,50]))
plot(density(quantiled1[,10]))

multidensity(normalize.quantiles(log2(ex)) , legend=list("topright", levels(n),
                                                         lty=1, lwd=2,text.font = 1, cex = 0.5,col = 1:12) , main="densities")



multidensity(medianpolished1 , legend=list("topright", levels(n),
                                           lty=1, lwd=2,text.font = 1, cex = 0.5,col = 1:12) , main="densities")








#######################
##### MA plots ########
#######################



par(mfrow = c(2,3))


for(i in 2:7){
  A = (ex[,1]+ex[,i])/2 
  M = (ex[,1]-ex[,i])    
  smoothScatter(A,M)
  abline(0,0 , col ="green")
}



for(i in 2:7){
  A = (zscored1[,1]+zscored1[,i])/2 
  M = (zscored1[,1]-zscored1[,i])    
  smoothScatter(A,M)
  abline(0,0 , col ="green")
}



for(i in 2:7){
  A = (quantiled1[,1]+quantiled1[,i])/2 
  M = (quantiled1[,1]-quantiled1[,i])    
  smoothScatter(A,M)
  abline(0,0 , col ="green")
}



for(i in 2:7){
  A = (medianpolished1[,1]+medianpolished1[,i])/2 
  M = (medianpolished1[,1]-medianpolished1[,i])    
  plot(A , M , pch = ".")
  abline(0,0 , col ="green")
}

dev.off()









##########################
#### QQ Plots ############
##########################


par(mfrow = c(2,2))

a = ex[1,]
ps = seq(0.01 , 0.99 , by = 0.02)
qs = quantile(a , ps)
normalqs = qnorm(ps , mean = mean(zscored1) ,sd = sd(zscored1))
plot(normalqs , qs , xlab = "QQplot" , ylab = "Data", col = "orange")
title("None normalized data")


a = zscored1[1,]
ps = seq(0.01 , 0.99 , by = 0.02)
qs = quantile(a , ps)
normalqs = qnorm(ps , mean = mean(zscored1) ,sd = sd(zscored1))
plot(normalqs , qs , xlab = "QQplot" , ylab = "Data", col = "orange")
title("Zscore normalization")


a = quantiled1[1,]
ps = seq(0.01 , 0.99 , by = 0.02)
qs = quantile(a , ps)
normalqs = qnorm(ps , mean = mean(zscored1) ,sd = sd(zscored1))
plot(normalqs , qs , xlab = "QQplot" , ylab = "Data", col = "orange")
title("Quantile normalization")


a = medianpolished1[1,]
ps = seq(0.01 , 0.99 , by = 0.02)
qs = quantile(a , ps)
normalqs = qnorm(ps , mean = mean(zscored1) ,sd = sd(zscored1))
plot(normalqs , qs , xlab = "QQplot" , ylab = "Data", col = "orange")
title("Median Polishe normalization")

dev.off()








par(mfrow = c(2,2))

a = ex[,1]
ps = seq(0.01 , 0.99 , by = 0.01)
qs = quantile(a , ps)
normalqs = qnorm(ps , mean = mean(zscored1) ,sd = sd(zscored1))
plot(normalqs , qs , xlab = "QQplot" , ylab = "Data", col = "orange")
title("None normalized data")


a = zscored1[,1]
ps = seq(0.01 , 0.99 , by = 0.01)
qs = quantile(a , ps)
normalqs = qnorm(ps , mean = mean(zscored1) ,sd = sd(zscored1))
plot(normalqs , qs , xlab = "QQplot" , ylab = "Data", col = "orange")
title("Zscore normalization")


a = quantiled1[,1]
ps = seq(0.01 , 0.99 , by = 0.01)
qs = quantile(a , ps)
normalqs = qnorm(ps , mean = mean(zscored1) ,sd = sd(zscored1))
plot(normalqs , qs , xlab = "QQplot" , ylab = "Data", col = "orange")
title("Quantile normalization")


a = medianpolished1[,1]
ps = seq(0.01 , 0.99 , by = 0.01)
qs = quantile(a , ps)
normalqs = qnorm(ps , mean = mean(zscored1) ,sd = sd(zscored1))
plot(normalqs , qs , xlab = "QQplot" , ylab = "Data", col = "orange")
title("Median Polishe normalization")






# Shapiro is a statistical test which is used to test whether the data has Gaussian distribution or not.
# If p-value < 0.1,we consider that the data has normal distribution.

shapirotest=c()
for(i in 1:10){
  shapirotest[i] = (shapiro.test(expressionMatrix[i,]))$p.value
}
shapirotest






