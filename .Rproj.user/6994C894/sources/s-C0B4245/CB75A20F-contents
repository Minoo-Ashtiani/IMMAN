library(igraph)
data.list<-read.table("edgelist.giant.component.erdos.txt",header=T,sep="\t")
mat.net=as.matrix(data.list) # coerces the data into a two-column matrix format that igiant.comp likes
rm(data.list)
rownames(mat.net) <- NULL
edge<-mat.net[,1:2]
rm(mat.net)
edge[,1]=as.character(edge[,1])
edge[,2]=as.character(edge[,2])

g=graph.edgelist(edge,directed=FALSE) # turns the edgelist into a 'graph object'

################################### Fitting degree distribution of a graph by power law ##############################
d = degree(g, mode = "all")
png("Hist of degree.barabasi.png", width = 1200, height = 600)
hist(d,main="Histogram of Degrees")
dev.off()

dd = degree.distribution(g, mode = "all", cumulative = FALSE)

# Plot degree distribution

# write a function to plot the degree distribution
plot_degree_distribution = function(graph) {
  # calculate degree
  d = degree(graph, mode = "all")
  dd = degree.distribution(graph, mode = "all", cumulative = FALSE)
  degree = 1:max(d)
  probability = dd[-1]
  # delete blank values
  nonzero.position = which(probability != 0)
  probability = probability[nonzero.position]
  degree = degree[nonzero.position]
  # plot
  plot(probability ~ degree, log = "xy", xlab = "Degree (log)", ylab = "Probability (log)",
       col = 1, main = "Degree Distribution")
}


png("Degree distribution plot.barabasi.png", width = 1200, height = 600)
plot_degree_distribution(g)
dev.off()

# plot and fit the power law distribution
fit_power_law = function(graph) {
  # calculate degree
  d = degree(graph, mode = "all")
  dd = degree.distribution(graph, mode = "all", cumulative = FALSE)
  degree = 1:max(d)
  probability = dd[-1]
  # delete blank values
  nonzero.position = which(probability != 0)
  probability = probability[nonzero.position]
  degree = degree[nonzero.position]
  reg = lm(log(probability) ~ log(degree))
  cozf = coef(reg)
  power.law.fit = function(x) exp(cozf[[1]] + cozf[[2]] * log(x))
  alpha = -cozf[[2]]
  R.square = summary(reg)$r.squared
  print(paste("Alpha =", round(alpha, 3)))
  print(paste("R square =", round(R.square, 3)))
  # plot
  plot(probability ~ degree, log = "xy", xlab = "Degree (log)", ylab = "Probability (log)",
       col = 1, main = "Degree Distribution")
  curve(power.law.fit, col = "red", add = T, n = length(d))
}
png("Fitting power law.barabasi.png", width = 1200, height = 600)
fit_power_law(g)
dev.off()

